// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// approximately_equal_DeepState_TestHarness_generation.cpp and approximately_equal_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

bool approximately_equal(double x1, double x2);

TEST(ggrepel_deepstate_test,approximately_equal_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x1(1);
  x1[0]  = RcppDeepState_double();
  std::string x1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ggrepel/inst/testfiles/approximately_equal/AFL_approximately_equal/afl_inputs/" + std::to_string(t) + "_x1.qs";
  qs::c_qsave(x1,x1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x1 values: "<< x1 << std::endl;
  NumericVector x2(1);
  x2[0]  = RcppDeepState_double();
  std::string x2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ggrepel/inst/testfiles/approximately_equal/AFL_approximately_equal/afl_inputs/" + std::to_string(t) + "_x2.qs";
  qs::c_qsave(x2,x2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x2 values: "<< x2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    approximately_equal(x1[0],x2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
